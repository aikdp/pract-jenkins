
pipeline{
    //agent any
    agent{
        label 'AGENT-1'
    }
    options{
        disableConcurrentBuilds() 
        // retry(2)    //it will retry 2 times, if pipeline failure
        timeout(time: 30, unit: 'MINUTES') //pipeline will stop/abort when specified time period
        ansiColor('xterm')
    }
    environment{
        project = 'expense'
        docker_user_id = 'kdprasad028'
        component = ''
        region = 'us-east-1'
        aws_account_id = '537124943253'

    }
    parameters {
    string(name: 'component', defaultValue: 'backend', description: 'Component name')
    choice(name: 'ENVIRONMENT', choices: ['dev', 'qa', 'uat', 'pre-pod', 'prod'], description: 'Select environment')

    }
    stages{
        stage("Read Vesrion"){
            steps{
                script {
                    dir('backend/node'){
                        // Read the JSON file
                        def packageJson = readJSON file: 'package.json'
                        imageVersion = packageJson.version
                        // Access JSON properties
                        // echo "Version is: ${packageJson.version}"   //you can directly use this line as well
                        echo "Version is: ${imageVersion}"
                    } 
                }          
            }
        }
        //U need nodejs configs in the JENKINS-AGENT, before going to this Stage
        stage("Install dependencies"){
            steps{
                sh """
                    cd backend/node

                    npm install
                """
            }
        }
        //install docker in jenkins agent and Should AWS ECR repo created to push image
        stage("Build docker Image"){
            steps{
                withCredentials([aws(credentialsId: "aws-creds")]) {
                    sh """
                        cd backend
                        
                        aws ecr get-login-password --region ${region} | docker login --username AWS --password-stdin ${aws_account_id}.dkr.ecr.us-east-1.amazonaws.com

                        docker build -t ${aws_account_id}.dkr.ecr.us-east-1.amazonaws.com/${project}/${params.ENVIRONMENT}/${params.component}:${imageVersion} .
                       
                        docker images

                        docker push ${aws_account_id}.dkr.ecr.us-east-1.amazonaws.com/${project}/${params.ENVIRONMENT}/${params.component}:${imageVersion}
                    """
                }
            }
        }
    }
    //post build section
   post{
        always{
            echo "I always run when pipeline running"
            deleteDir()    //Cleans up workspace after every build.
        }
        failure{
            echo "Pipeline is FAILED"
        }
        success {
            echo "Pipeline is Success"
        }
        regression {
            echo "It will execute if Pipeline status is failure, unstable, or aborted and the previous run was successful"
        }
   }
}