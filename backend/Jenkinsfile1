pipeline{
    agent any
    // agent{
    //     label 'AGENT-1'
    // }
    options{
        disableConcurrentBuilds() 
        // retry(2)    //it will retry 2 times, if pipeline failure
        timeout(time: 30, unit: 'MINUTES') //pipeline will stop/abort when specified time period
    }
    environment{
        docker_user_id = 'kdprasad028'
        component = ""

    }
    parameters {
    string(name: 'component', defaultValue: 'backend', description: 'Component name')

    }
    stages{
        stage("Read Vesrion"){
            steps{
                script {
                    dir('backend/node'){
                        // Read the JSON file
                        def packageJson = readJSON file: 'package.json'
                        imageVersion = packageJson.version
                        // Access JSON properties
                        // echo "Version is: ${packageJson.version}"   //you can directly use this line as well
                        echo "Version is: ${imageVersion}"
                    }
                }          
            }
        }
        stage("Build NPM"){
            steps{
                sh """ 
                    cd backend/node
    
                    npm install
                """
            }
        }
        //install docker in jenkins agent
        stage("Build Image"){
            steps{
                sh """
                    cd backend
                    docker build -t ${docker_user_id}/${params.component}:${imageVersion} .
                    docker images
                """
            }
        }
        // stage("Push Image to ECR"){
        //     steps{
        //         sh """
        //             cd backend
        //             docker push  -t ${docker_user_id}/${params.component}:${imageVersion} .
        //             docker images
        //         """
        //     }
        // }
      
    }
    //post build section
    post{
        always{
            echo "I always run when pipeline running"
            deleteDir()    //Cleans up workspace after every build.
        }
        failure{
            echo "Pipeline is FAILED"
        }
        success {
            echo "Pipeline is Success"
        }
        regression {
            echo "It will execute if Pipeline status is failure, unstable, or aborted and the previous run was successful"
        }
    }
 }

