pipeline{
    agent{
        label 'AGENT-1'
    }
    options{
        disableConcurrentBuilds() 
        retry(2)    //it will retry 2 times, if pipeline failure
        timeout(time: 30, unit: 'MINUTES') //pipeline will stop/abort when specified time period
    }
    environment{
        project = 'expense'
        environment = ''
        component = ''
        region = 'us-east-1'
        aws_account_id = '537124943253'

    }
    parameters {
    string(name: 'component', defaultValue: 'backend', description: 'Component name')
    choice(name: 'ENVIRONMENT', choices: ['dev', 'qa', 'uat', 'pre-pod', 'prod'], description: 'Select environment')
    }
    stages{
        stage("Read Vesrion"){
            steps{
                script {
                    // Read the JSON file
                    def packageJson = readJSON file: 'package.json'
                    imageVersion = packageJson.version
                    // Access JSON properties
                    // echo "Version is: ${packageJson.version}"   //you can directly use this line as well
                    echo "Version is: ${imageVersion}"
                }          
            }
        }
        stage("Install dependencies"){
            steps{
                sh 'npm install'
            }
        }
        //install docker in jenkins agent
        stage("Build docker Image"){
            steps{
                withCredentials([[credentialsId: 'aws-creds', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh """
                        aws ecr get-login-password --region ${region} | docker login --username AWS --password-stdin ${aws_account_id}.dkr.ecr.us-east-1.amazonaws.com

                        docker build -t  ${aws_account_id}.dkr.ecr.us-east-1.amazonaws.com/${params.component}:${imageVersion} .

                        docker images

                        docker push ${aws_account_id}.dkr.ecr.us-east-1.amazonaws.com/${params.component}:${imageVersion}
                    """
                }
            }
        }
        stage("Deploy to Application to Kubernetes"){
            steps{
                withCredentials([[credentialsId: 'aws-creds', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh """
                        aws eks update-kubeconfig -- region ${region} --name ${project}-${params.ENVIRONMENT}

                        sed -i 's/IMAGE_VERSION/${imageVesrion}/g' values-${params.ENVIRONMENT}.yaml

                        helm upgrade --install ${params.component} -n ${project} -f values-${params.ENVIRONMENT}.yaml
                    """
                }
            }
        }
    }
    //post build section
    always{
        echo "I always run when pipeline running"
        deleteDir()    //Cleans up workspace after every build.
    }
    failure{
        echo "Pipeline is FAILED"
    }
    success {
        echo "Pipeline is Success"
    }
    regression {
        echo "It will execute if Pipeline status is failure, unstable, or aborted and the previous run was successful"
    }
}

