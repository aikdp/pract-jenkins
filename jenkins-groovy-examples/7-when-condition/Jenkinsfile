pipeline{
    agent any
    options{
        disableConcurrentBuilds() 
        // retry(2)    //it will retry 2 times, if pipeline failure
        timeout(time: 20, unit: 'MINUTES') //pipeline will stop/abort when specified time period
        ansiColor('xterm')
    }
    // parameters {
    // string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')

    // text(name: 'BIOGRAPHY', defaultValue: '', description: 'Enter some information about the person')

    // booleanParam(name: 'TOGGLE', defaultValue: true, description: 'Toggle this value')

    // choice(name: 'CHOICE', choices: ['One', 'Two', 'Three'], description: 'Pick something')

    // password(name: 'PASSWORD', defaultValue: 'SECRET', description: 'Enter a password')
    // }
    stages{
        stage("Build"){
            steps{
                echo "echo hello world"
            }
        }
        stage("Test"){
            steps{
                echo "I am from Test stage"
            }
        }
        stage("Deploy"){
            steps{
                echo "I am from Deploy stage"
                // sh "env"
            }
        }
        // stage("Parameters"){
        //     steps{
        //         echo "Hello ${params.PERSON}"    //we can dynamically pass parameters
        //         echo "Tell me you biograpghy: ${params.BIOGRAPHY}"
        //         echo "Select Toggle is: ${params.TOGGLE}"
        //         echo "Select choices: ${params.CHOICE}"
        //         echo "Enter your Password: ${params.PASSWORD}"
        //     }
        // }
        stage("Code Quality Check"){
            //when condition used before option, if condition true, this stage will execute, otherwise don't
             when {
                    expression {GIT_BRANCH == "origin/main"}
                }
            steps{
               echo "Qulaity Check PASSED, As this is main branch"
            }
        }
    }
    //post build section
    post{
        always{
            echo "I always run when pipeline running"
            deleteDir()    //Cleans up workspace after every build.
        }
        failure{
            echo "Pipeline is FAILED"
        }
        success {
            echo "Pipeline is Success"
        }
        regression {
            echo "It will execute if Pipeline status is failure, unstable, or aborted and the previous run was successful"
        }
    }
}

