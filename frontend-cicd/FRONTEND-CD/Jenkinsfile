pipeline{
    // agent any
    agent{
        label 'AGENT-1'
    }
    options{
        disableConcurrentBuilds() 
        // retry(2)    //it will retry 2 times, if pipeline failure
        timeout(time: 30, unit: 'MINUTES') //pipeline will stop/abort when specified time period
        ansiColor('xterm')
    }
    environment{
        project = 'expense'
        environment = ''
        component = ''
        region = ''
        aws_account_id = '537124943253'
    }
    parameters {
        string(name: 'component', defaultValue: 'frontend', description: 'Component name')
        choice(name: 'ENVIRONMENT', choices: ['dev', 'qa', 'uat', 'pre-pod', 'prod'], description: 'Select environment')
        string(name: 'region', defaultValue: 'frontend', description: 'Component name')
        string(name: 'version', defaultValue: 'frontend', description: 'Component name')
        booleanParam(name: 'deploy', defaultValue: false, description: 'deploy this')
    }
    stages{
        stage('Access environment Variables from CI Pipeline'){
            steps{
                script{
                    component = params.component
                    region = params.region
                    environment = params.ENVIRONMENT
                    appVersion = params.version
                }
            }
        }
        //install docker in jenkins agent, if u are running this satge in agent.
        stage("Deploy to Application to Kubernetes"){
            steps{
                // withCredentials([[credentialsId: 'aws-creds', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                withCredentials([aws(credentialsId: "aws-creds")]) {
                    sh """
                        cd frontend-cid/FRONTEND-CD/helm

                        aws eks update-kubeconfig --region ${region} --name ${project}-${environment}

                        sed -i 's/IMAGE_VERSION/${appVersion}/g' values-${environment}.yaml

                        helm upgrade --install ${component} -n ${project} -f values-${environment}.yaml .
                    """
                }
            }
        }
    }
    post{
        //post build section
        always{
            echo "I always run when pipeline running"
            deleteDir()    //Cleans up workspace after every build.
        }
        failure{
            echo "Pipeline is FAILED"
        }
        success {
            echo "Pipeline is Success"
        }
        regression {
            echo "It will execute if Pipeline status is failure, unstable, or aborted and the previous run was successful"
        }
    }
}

